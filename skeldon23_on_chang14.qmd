---
title: "Skeldon23 model on Chang14 light schedule"
format:
  html:
    code-fold: true
jupyter: python3
execute: 
  freeze: auto
---

{{< include _light_schedules.qmd >}}

```{python}
#| echo: false

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from circadian.models import Skeldon23
from circadian.models import DynamicalTrajectory

time = light_schedule_time #TODO: Clean this up
model = Skeldon23()

def circadian_modulation_of_sleep(model, trajectory_states):
    x = trajectory_states[:, 0]
    xc = trajectory_states[:, 1]
    linear_term = model.c20 + model.alpha21 * xc + model.alpha22 * x
    quadratic_term = model.beta21 * xc * xc + model.beta22 * xc * x + model.beta23 * x * x
    C = linear_term + quadratic_term
    return C

def H_thresholds(model, trajectory_states):
    C = circadian_modulation_of_sleep(model, trajectory_states)
    H_plus = model.H0 + 0.5 * model.Delta + model.ca * C
    H_minus = model.H0 - 0.5 * model.Delta + model.ca * C 
    return H_plus, H_minus

def calculate_sleep_onset(data, simulation_condition):
    # Ignore the last day
    sleep = data[f'{simulation_condition}_sleep']
    sleep_onset_idx = np.where(np.diff(sleep) == 1)[0]
    sleep_onset_time = time[sleep_onset_idx][:-1]
    return sleep_onset_time

def calculate_cbtmin(data, simulation_condition):
    # Ignore the last day
    trajectory = DynamicalTrajectory(time, data[f'{simulation_condition}_trajectory_states'])
    cbtmin = model.cbt(trajectory)[:-1]
    return cbtmin

# Load selected parameters
selected_parameters = pd.read_csv('data/parameter_exploration/selected_parameters.csv', index_col=0)
```

After doing simulations for 125 parameter sets:

```{python}
#| eval: false
mu_values = np.linspace(17.5, 19.5, 5)
delta_values = np.linspace(5.0, 9.0, 5)
chi_values = np.linspace(7.0, 11.0, 5)
```

we select only those with a sleep duration that is greater than 6.5 hours, leaving us with `{python} selected_parameters.shape[0]` parameter sets. The distribution of sleep duration is shown below:

```{python}
# histogram of sleep sleep time from selected parameters
sleep_time = selected_parameters['sleep_time']
plt.hist(sleep_time, bins=20, rwidth=0.8)
xticks = np.linspace(6.5, 8.0, 7)
plt.xticks(xticks)
plt.xlabel('Sleep duration (hours)')
plt.ylabel('Count')
# Add annotation for the number of selected parameters
plt.annotate(f'N = {selected_parameters.shape[0]}', xy=(7.85, 8))
plt.show()
```

For each of these parameter sets, we simulate the model under three light schedules:
- Regular
- Chang14 with eBook on the first week (book on the second week)
- Chang14 with eBook on the second week (book on the first week)

```{python}
#| echo: false

simulation_features = pd.DataFrame()
for idx in selected_parameters.index:
    data = np.load(f'data/skeldon23_on_chang14/chang14_simulation_{idx}.npz', 
                    allow_pickle=True)

    regular_sleep_onset = calculate_sleep_onset(data, 'regular')
    regular_cbtmin = calculate_cbtmin(data, 'regular')

    data_subset = {
        'idx': idx,
        'day': np.arange(1, 14),
        'simulation_condition': 'regular',
        'sleep_onset': regular_sleep_onset % 24,
        'cbtmin': regular_cbtmin % 24,
    }

    simulation_features = pd.concat([simulation_features, pd.DataFrame(data_subset)])

    for reading_condition in ['ebook_first', 'ebook_second']:
        sleep_onset = calculate_sleep_onset(data, reading_condition)
        cbtmin = calculate_cbtmin(data, reading_condition)
        data_subset = {
            'idx': idx,
            'day': np.arange(1, 14),
            'simulation_condition': reading_condition,
            'sleep_onset': sleep_onset % 24,
            'cbtmin': cbtmin % 24,
        }

        simulation_features = pd.concat([simulation_features, pd.DataFrame(data_subset)])
```

We can analyze the sleep onset for each simulation condition:
```{python}
colors = sns.color_palette('tab10')
for idx, simulation_condition in enumerate(['regular', 'ebook_first', 'ebook_second']):
    plt.figure(idx)
    plot_data = simulation_features[simulation_features['simulation_condition'] == simulation_condition]
    sns.catplot(x='day', y='sleep_onset', data=plot_data, kind='box', color=colors[idx], showfliers=False)
    sns.stripplot(x='day', y='sleep_onset', data=plot_data, color='black', alpha=0.5, dodge=True)
    if simulation_condition == 'ebook_first':
        plt.axvspan(3 - 2, 7 - 2, color='red', alpha=0.3, label='eBook')
        plt.axvspan(9 - 2, 13 - 2, color='gray', alpha=0.3, label='Book')
    elif simulation_condition == 'ebook_second':
        plt.axvspan(3 - 2, 7 - 2, color='gray', alpha=0.3, label='Book')
        plt.axvspan(9 - 2, 13 - 2, color='red', alpha=0.3, label='eBook')
    plt.ylim(21.9, 23.7)
    plt.legend()
    plt.xlabel('Day')
    plt.ylabel('Sleep onset (hours)')
    plt.title(f"Sleep onset for {simulation_condition} condition")
    plt.show()
```

As expected the regular condition has no change in sleep onset across days (it does between different simulations). For the Chang14 light schedule, we see that the sleep onset varies over the two weeks. When the eBook is on the first week (days 2-6), sleep onset remains relatively constant for that first week. However when reading is done with a book (days 8-12), the sleep onset starts to decrease. On the contrary, when the eBook is on the second week, sleep onset starts to decrease at first (book reading), and then increases (eBook reading).

There are many parameter sets that have a regular sleep onset that is close or equal to 22 hours (time the lights go off). Those  sets tend to have little to no change when simulated under the Chang14 light schedules:

```{python}
# for each idx, calculate the avg and std sleep onset for each simulation condition (average across days)
sleep_onset_data = simulation_features.groupby(['idx', 'simulation_condition']).agg({'sleep_onset': ['mean', 'std']}).reset_index()

regular_data = sleep_onset_data[sleep_onset_data['simulation_condition'] == 'regular']
ebook_first_data = sleep_onset_data[sleep_onset_data['simulation_condition'] == 'ebook_first']
ebook_second_data = sleep_onset_data[sleep_onset_data['simulation_condition'] == 'ebook_second']
# plot regular mean vs ebook_first std
plt.plot(regular_data['sleep_onset']['mean'], ebook_first_data['sleep_onset']['std'], 'o', alpha=0.5, color='tab:blue')
plt.plot(regular_data['sleep_onset']['mean'], ebook_second_data['sleep_onset']['std'], 'o', alpha=0.5, color='tab:blue')
plt.xlabel('Regular schedule sleep onset')
plt.ylabel('Stdev of sleep onset across days')
plt.show()
```

# Difference in sleep onset between book and ebook days

As in [@chang2014sleep], we plot the sleep latency (`sleep_onset - 22.0`) for each reading condition on the last day of reading:

```{python}
ebook_bedtime_1 = simulation_features[(simulation_features['day'] == 6) & (simulation_features['simulation_condition'] == 'ebook_first')]['sleep_onset'].to_numpy()
ebook_bedtime_2 = simulation_features[(simulation_features['day'] == 13) & (simulation_features['simulation_condition'] == 'ebook_second')]['sleep_onset'].to_numpy()

book_bedtime_1 = simulation_features[(simulation_features['day'] == 12) & (simulation_features['simulation_condition'] == 'ebook_first')]['sleep_onset'].to_numpy()
book_bedtime_2 = simulation_features[(simulation_features['day'] == 6) & (simulation_features['simulation_condition'] == 'ebook_second')]['sleep_onset'].to_numpy()

ebook_bedtime = 60.0 * (np.concatenate([ebook_bedtime_1, ebook_bedtime_2]) - 22.0)
book_bedtime = 60.0 * (np.concatenate([book_bedtime_1, book_bedtime_2]) - 22.0)

# boxplot of each
sns.boxplot(data=[ebook_bedtime, book_bedtime], showfliers=False)
sns.stripplot(data=[ebook_bedtime, book_bedtime], color='black', alpha=0.5)
plt.ylabel('Sleep latency (min)')
plt.xticks([0, 1], ['eBook', 'Book'])
```

Additionally, we calculate the sleep onset difference (within each simulation) between the last day of each reading condition:
```{python}
ebook_bedtime_1 = simulation_features[(simulation_features['day'] == 6) & (simulation_features['simulation_condition'] == 'ebook_first')]['sleep_onset'].to_numpy()
book_bedtime_1 = simulation_features[(simulation_features['day'] == 12) & (simulation_features['simulation_condition'] == 'ebook_first')]['sleep_onset'].to_numpy()
difference_1 = ebook_bedtime_1 - book_bedtime_1

ebook_bedtime_2 = simulation_features[(simulation_features['day'] == 12) & (simulation_features['simulation_condition'] == 'ebook_second')]['sleep_onset'].to_numpy()
book_bedtime_2 = simulation_features[(simulation_features['day'] == 6) & (simulation_features['simulation_condition'] == 'ebook_second')]['sleep_onset'].to_numpy()
difference_2 = ebook_bedtime_2 - book_bedtime_2

# boxplot of difference
difference = np.concatenate([difference_1, difference_2])
sns.boxplot(data=difference * 60)
sns.stripplot(data=difference * 60, color='black', alpha=0.5)
plt.ylabel('eBook - Book bedtime difference (min)')
plt.show()
```

# Phase shift between book and ebook days

```{python}
#| eval: false
# calculate the difference between day 13 and day 6 for cbtmin
ebook_cbtmin_1 = sleep_onset_data[(sleep_onset_data['day'] == 6) & (sleep_onset_data['reading_condition'] == 'ebook_first')]['chang14_cbtmin'].to_numpy()
ebook_cbtmin_2 = sleep_onset_data[(sleep_onset_data['day'] == 13) & (sleep_onset_data['reading_condition'] == 'ebook_first')]['chang14_cbtmin'].to_numpy()
difference_1 = ebook_cbtmin_1 - ebook_cbtmin_2

book_cbtmin_1 = sleep_onset_data[(sleep_onset_data['day'] == 6) & (sleep_onset_data['reading_condition'] == 'ebook_second')]['chang14_cbtmin'].to_numpy() % 24
book_cbtmin_2 = sleep_onset_data[(sleep_onset_data['day'] == 13) & (sleep_onset_data['reading_condition'] == 'ebook_second')]['chang14_cbtmin'].to_numpy() % 24
difference_2 = book_cbtmin_1 - book_cbtmin_2


difference = np.concatenate([difference_1, difference_2])
# seaborn boxplot showing the dots
sns.boxplot(data=difference * 60)
sns.stripplot(data=difference * 60, color='black', alpha=0.5)
plt.ylabel('Phase shift as CBTmin difference (min)')
plt.xlabel('Reading condition')
plt.show()
```

```{python}
#| eval: false
for reading_condition in ['ebook_first', 'ebook_second']:
    for idx in selected_parameters.index:
        try:
            data = np.load(f'data/skeldon23_on_chang14/chang14_simulation_{idx}.npz', allow_pickle=True)
        except:
            continue

        regular_trajectory = data['regular_trajectory_states']
        chang14_trajectory = data[f'{reading_condition}_trajectory_states']

        regular_sleep = data['regular_sleep']
        chang14_sleep = data[f'{reading_condition}_sleep']

        day_6_idx = np.where((time < 6*24) & (time > 5*24))[0]
        day_13_idx = np.where((time < 13*24) & (time > 12*24))[0]
        normalized_time = np.arange(0, 24, 24/len(day_6_idx))

        plt.plot(normalized_time, regular_trajectory[day_6_idx, 0], color='tab:blue')
        plt.plot(normalized_time, regular_trajectory[day_13_idx, 0], color='tab:blue')
        plt.plot(normalized_time, regular_sleep[day_6_idx], color='tab:blue', linestyle='--')
        plt.plot(normalized_time, regular_sleep[day_13_idx], color='tab:blue', linestyle='--')
        if reading_condition == 'ebook_first':
            plt.plot(normalized_time, chang14_trajectory[day_6_idx, 0], color='tab:green')
            plt.plot(normalized_time, chang14_trajectory[day_13_idx, 0], color='tab:red')
        else:
            plt.plot(normalized_time, chang14_trajectory[day_6_idx, 0], color='tab:red')
            plt.plot(normalized_time, chang14_trajectory[day_13_idx, 0], color='tab:green')
    plt.axvspan(6, 22, color='yellow', alpha=0.4)

```

```{python}
#| eval: false
for idx in selected_parameters.index:
    try:
        data = np.load(f'data/skeldon23_on_chang14/chang14_simulation_{idx}.npz', allow_pickle=True)
    except:
        continue

    regular_trajectory = data['regular_trajectory_states']
    chang14_trajectory = data[f'{reading_condition}_trajectory_states']

    regular_sleep = data['regular_sleep']
    chang14_sleep = data[f'{reading_condition}_sleep']

    first_week_idx = np.where((time < 14*24) & (time > 13*24))[0]
    normalized_time = np.arange(0, 24, 24/len(first_week_idx))

    plt.plot(normalized_time, chang14_trajectory[first_week_idx, 3])

plt.title('Day 14')
plt.ylabel('Circadian state')
plt.xlabel('Time (hours)')

```
```{python}
#| eval: false
for idx in selected_parameters.index:
    try:
        data = np.load(f'data/skeldon23_on_chang14/chang14_simulation_{idx}.npz', allow_pickle=True)
    except:
        continue

    regular_trajectory = data['regular_trajectory_states']
    chang14_trajectory = data[f'{reading_condition}_trajectory_states']

    regular_sleep = data['regular_sleep']
    chang14_sleep = data[f'{reading_condition}_sleep']

    first_week_idx = np.where((time < 14*24) & (time > 13*24))[0]
    normalized_time = np.arange(0, 24, 24/len(first_week_idx))

    plt.plot(normalized_time, chang14_sleep[first_week_idx])

plt.title('Day 14')
plt.ylabel('Sleep')
plt.xlabel('Time (hours)')

```

So I think I know the reason for these plots, the sleep homeostat only feeds back to the circadian state by changing the light the model receives. Given that we force it to be awake when there's light, there's actually no change in light schedule for each simulation and that causes the circadian state to be the same for each simulation.
-->