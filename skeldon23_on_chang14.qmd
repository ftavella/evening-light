---
title: "Skeldon23 model on Chang14 light schedule"
format:
  html:
    code-fold: true
jupyter: python3
execute: 
  freeze: auto
---

{{< include _light_schedules.qmd >}}

```{python}
#| echo: false

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from circadian.models import Skeldon23
from circadian.models import DynamicalTrajectory

time = light_schedule_time #TODO: Clean this up
model = Skeldon23()

def circadian_modulation_of_sleep(model, trajectory_states):
    x = trajectory_states[:, 0]
    xc = trajectory_states[:, 1]
    linear_term = model.c20 + model.alpha21 * xc + model.alpha22 * x
    quadratic_term = model.beta21 * xc * xc + model.beta22 * xc * x + model.beta23 * x * x
    C = linear_term + quadratic_term
    return C

def H_thresholds(model, trajectory_states):
    C = circadian_modulation_of_sleep(model, trajectory_states)
    H_plus = model.H0 + 0.5 * model.Delta + model.ca * C
    H_minus = model.H0 - 0.5 * model.Delta + model.ca * C 
    return H_plus, H_minus

def calculate_sleep_onset(data, simulation_condition):
    # Ignore the last day
    sleep = data[f'{simulation_condition}_sleep']
    sleep_onset_idx = np.where(np.diff(sleep) == 1)[0]
    sleep_onset_time = time[sleep_onset_idx][:-1]
    return sleep_onset_time

def calculate_cbtmin(data, simulation_condition):
    # Ignore the last day
    trajectory = DynamicalTrajectory(time, data[f'{simulation_condition}_trajectory_states'])
    cbtmin = model.cbt(trajectory)[:-1]
    return cbtmin

# Load selected parameters
selected_parameters = pd.read_csv('data/parameter_exploration/selected_parameters.csv', index_col=0)
```

```{python}
# calculate the sleep times closest to 7.5 hours
distance = np.abs(selected_parameters['sleep_time'] - 7.5)
idx = np.argmin(distance)
print(selected_parameters.iloc[idx])
```

We did simulations for 125 parameter sets:

```{python}
#| eval: false
#| code-fold: false 
mu_values = np.linspace(17.5, 19.5, 5)
delta_values = np.linspace(5.0, 9.0, 5)
chi_values = np.linspace(7.0, 11.0, 5)
```

we select only those with a sleep duration that is greater than 6.5 hours, leaving us with `{python} selected_parameters.shape[0]` parameter sets. The distribution of sleep duration is shown below:

```{python}
#| echo: false
# histogram of sleep sleep time from selected parameters
sleep_time = selected_parameters['sleep_time']
plt.hist(sleep_time, bins=20, rwidth=0.8)
xticks = np.linspace(6.5, 8.0, 7)
plt.xticks(xticks)
plt.xlabel('Sleep duration (hours)')
plt.ylabel('Count')
# Add annotation for the number of selected parameters
plt.annotate(f'N = {selected_parameters.shape[0]}', xy=(7.85, 8))
plt.show()
```

For each of these parameter sets, we simulate the model under three light schedules:

- Regular
- Chang14 with eBook on the first week (book on the second week)
- Chang14 with eBook on the second week (book on the first week)

For all these schedules, there is an 8 hour total darkness region that spans from 10 PM (22:00) to 6 AM (6:00).

```{python}
#| echo: false

simulation_features = pd.DataFrame()
for idx in selected_parameters.index:
    data = np.load(f'data/skeldon23_on_chang14/chang14_simulation_{idx}.npz', 
                    allow_pickle=True)

    regular_sleep_onset = calculate_sleep_onset(data, 'regular')
    regular_cbtmin = calculate_cbtmin(data, 'regular')

    data_subset = {
        'idx': idx,
        'day': np.arange(1, 14),
        'simulation_condition': 'regular',
        'sleep_onset': regular_sleep_onset % 24,
        'cbtmin': regular_cbtmin % 24,
    }

    simulation_features = pd.concat([simulation_features, pd.DataFrame(data_subset)])

    for reading_condition in ['ebook_first', 'ebook_second']:
        sleep_onset = calculate_sleep_onset(data, reading_condition)
        cbtmin = calculate_cbtmin(data, reading_condition)
        data_subset = {
            'idx': idx,
            'day': np.arange(1, 14),
            'simulation_condition': reading_condition,
            'sleep_onset': sleep_onset % 24,
            'cbtmin': cbtmin % 24,
        }

        simulation_features = pd.concat([simulation_features, pd.DataFrame(data_subset)])
```

We can analyze the sleep onset for each simulation condition:
```{python}
#| echo: false
colors = sns.color_palette('tab10')
idx = 0
simulation_condition = 'regular'
plot_data = simulation_features[simulation_features['simulation_condition'] == simulation_condition]
sns.catplot(x='day', y='sleep_onset', data=plot_data, kind='box', color=colors[idx], showfliers=False)
sns.stripplot(x='day', y='sleep_onset', data=plot_data, color='black', alpha=0.5, dodge=True)
plt.ylim(21.9, 23.7)
plt.xlabel('Day')
plt.ylabel('Sleep onset (hours)')
plt.title(f"Sleep onset for {simulation_condition} condition")
plt.show()
```

```{python}
#| echo: false
idx = 1
simulation_condition = 'ebook_first'
plot_data = simulation_features[simulation_features['simulation_condition'] == simulation_condition]
sns.catplot(x='day', y='sleep_onset', data=plot_data, kind='box', color=colors[idx], showfliers=False)
sns.stripplot(x='day', y='sleep_onset', data=plot_data, color='black', alpha=0.5, dodge=True)
plt.axvspan(3 - 2, 7 - 2, color='red', alpha=0.3, label='eBook')
plt.axvspan(9 - 2, 13 - 2, color='gray', alpha=0.3, label='Book')
plt.legend()
plt.ylim(21.9, 23.7)
plt.xlabel('Day')
plt.ylabel('Sleep onset (hours)')
plt.title(f"Sleep onset for {simulation_condition} condition")
plt.show()
```

```{python}
#| echo: false
idx = 2
simulation_condition = 'ebook_second'
plot_data = simulation_features[simulation_features['simulation_condition'] == simulation_condition]
sns.catplot(x='day', y='sleep_onset', data=plot_data, kind='box', color=colors[idx], showfliers=False)
sns.stripplot(x='day', y='sleep_onset', data=plot_data, color='black', alpha=0.5, dodge=True)
plt.axvspan(3 - 2, 7 - 2, color='gray', alpha=0.3, label='Book')
plt.axvspan(9 - 2, 13 - 2, color='red', alpha=0.3, label='eBook')
plt.legend()
plt.ylim(21.9, 23.7)
plt.xlabel('Day')
plt.ylabel('Sleep onset (hours)')
plt.title(f"Sleep onset for {simulation_condition} condition")
plt.show()
```

As expected the regular condition has no change in sleep onset across days (it does between different simulations). For the Chang14 light schedule, we see that the sleep onset varies over the two weeks. When the eBook is on the first week (days 2-6), sleep onset remains relatively constant for that first week. However when reading is done with a book (days 8-12), the sleep onset starts to decrease. On the contrary, when the eBook is on the second week, sleep onset starts to decrease at first (book reading), and then increases (eBook reading).

There are many parameter sets that have a regular sleep onset that is close or equal to 22 hours (time the lights go off). Those  sets tend to have little to no change when simulated under the Chang14 light schedules:

```{python}
#| echo: false
# for each idx, calculate the avg and std sleep onset for each simulation condition (average across days)
sleep_onset_data = simulation_features.groupby(['idx', 'simulation_condition']).agg({'sleep_onset': ['mean', 'std']}).reset_index()

regular_data = sleep_onset_data[sleep_onset_data['simulation_condition'] == 'regular']
ebook_first_data = sleep_onset_data[sleep_onset_data['simulation_condition'] == 'ebook_first']
ebook_second_data = sleep_onset_data[sleep_onset_data['simulation_condition'] == 'ebook_second']
# plot regular mean vs ebook_first std
plt.plot(regular_data['sleep_onset']['mean'], ebook_first_data['sleep_onset']['std'], 'o', alpha=0.5, color='tab:blue')
plt.plot(regular_data['sleep_onset']['mean'], ebook_second_data['sleep_onset']['std'], 'o', alpha=0.5, color='tab:blue')
plt.xlabel('Regular schedule sleep onset')
plt.ylabel('Stdev of sleep onset across days')
plt.show()
```

# Difference in sleep onset between book and ebook days

As in [@chang_evening_2015], we plot the sleep latency (`sleep_onset - 22.0`) for each reading condition on the last day of reading:

```{python}
#| echo: false
ebook_bedtime_1 = simulation_features[(simulation_features['day'] == 6) & (simulation_features['simulation_condition'] == 'ebook_first')]['sleep_onset'].to_numpy()
ebook_bedtime_2 = simulation_features[(simulation_features['day'] == 13) & (simulation_features['simulation_condition'] == 'ebook_second')]['sleep_onset'].to_numpy()

book_bedtime_1 = simulation_features[(simulation_features['day'] == 12) & (simulation_features['simulation_condition'] == 'ebook_first')]['sleep_onset'].to_numpy()
book_bedtime_2 = simulation_features[(simulation_features['day'] == 6) & (simulation_features['simulation_condition'] == 'ebook_second')]['sleep_onset'].to_numpy()

ebook_bedtime = 60.0 * (np.concatenate([ebook_bedtime_1, ebook_bedtime_2]) - 22.0)
book_bedtime = 60.0 * (np.concatenate([book_bedtime_1, book_bedtime_2]) - 22.0)

# boxplot of each
sns.boxplot(data=[ebook_bedtime, book_bedtime], showfliers=False)
sns.stripplot(data=[ebook_bedtime, book_bedtime], color='black', alpha=0.5)
plt.ylabel('Sleep latency (min)')
plt.xticks([0, 1], ['eBook', 'Book'])
plt.show()
```

Additionally, we calculate the sleep onset difference (within each simulation) between the last day of each reading condition:
```{python}
#| echo: false
ebook_bedtime_1 = simulation_features[(simulation_features['day'] == 6) & (simulation_features['simulation_condition'] == 'ebook_first')]['sleep_onset'].to_numpy()
book_bedtime_1 = simulation_features[(simulation_features['day'] == 12) & (simulation_features['simulation_condition'] == 'ebook_first')]['sleep_onset'].to_numpy()
difference_1 = ebook_bedtime_1 - book_bedtime_1

ebook_bedtime_2 = simulation_features[(simulation_features['day'] == 12) & (simulation_features['simulation_condition'] == 'ebook_second')]['sleep_onset'].to_numpy()
book_bedtime_2 = simulation_features[(simulation_features['day'] == 6) & (simulation_features['simulation_condition'] == 'ebook_second')]['sleep_onset'].to_numpy()
difference_2 = ebook_bedtime_2 - book_bedtime_2

# boxplot of difference
difference = np.concatenate([difference_1, difference_2])
sns.boxplot(data=difference * 60)
sns.stripplot(data=difference * 60, color='black', alpha=0.5)
plt.ylabel('eBook - Book bedtime difference (min)')
plt.show()
```

# Phase shift between book and ebook days

Let's check how different the circadian state is for the different schedules on day 6 (plotting all simulated parameter sets):

```{python}
#| echo: false
colors = sns.color_palette('tab10')
labels = ['Regular', 'eBook first', 'eBook second']
day_6_idx = np.where((time < 6*24) & (time > 5*24))[0]
for idx, condition in enumerate(['regular', 'ebook_first', 'ebook_second']):
    for jdx in selected_parameters.index:
        try:
            data = np.load(f'data/skeldon23_on_chang14/chang14_simulation_{jdx}.npz', allow_pickle=True)
        except:
            continue

        trajectory = data[f'{condition}_trajectory_states']
        plt.plot(time[day_6_idx] % 24, trajectory[day_6_idx, 0], alpha=0.1, color=colors[idx])

plt.axvspan(6, 22, color='yellow', alpha=0.4)
plt.title('Day 6')
plt.ylabel('Circadian state (a.u.)')
plt.xlabel('Time (hours)')
plt.plot([], [], color=colors[0], label=labels[0])
plt.plot([], [], color=colors[1], label=labels[1])
plt.plot([], [], color=colors[2], label=labels[2])
plt.legend()
plt.show()
```

It is surprising that there isn't a spread between circadian states for different parameter sets, they are all on top of each other. On the other hand, if we plot the sleep pressure, we see a spread consistent with the spread in sleep onset times:

```{python}
#| echo: false
colors = sns.color_palette('tab10')
labels = ['Regular', 'eBook first', 'eBook second']
day_6_idx = np.where((time < 6*24) & (time > 5*24))[0]
for idx, condition in enumerate(['regular', 'ebook_first', 'ebook_second']):
    for jdx in selected_parameters.index:
        data = np.load(f'data/skeldon23_on_chang14/chang14_simulation_{jdx}.npz', allow_pickle=True)

        trajectory = data[f'{condition}_trajectory_states']
        plt.plot(time[day_6_idx] % 24, trajectory[day_6_idx, 3], alpha=0.1, color=colors[idx])

plt.axvspan(6, 22, color='yellow', alpha=0.4)
plt.title('Day 6')
plt.ylabel('Sleep pressure (a.u.)')
plt.xlabel('Time (hours)')
plt.plot([], [], color=colors[0], label=labels[0])
plt.plot([], [], color=colors[1], label=labels[1])
plt.plot([], [], color=colors[2], label=labels[2])
plt.legend()
plt.show()
```

Why is this the case?

I think the reason is because of the way the sleep homeostat is implemented. The only way that the sleep homeostat can affect the circadian state is by switching to sleep at a moment when the light is greater than zero. If this happens, the input light to the circadian model goes to zero. However, in these simulations we are forcing the model to be awake when the light is on, so the light schedule is the same for all simulations. This means that the circadian state is the same for all simulations. 

The only thing that can change the circadian state is changing the schedule, which does affect the final result as seen on the circadian state plot.

Therefore we can only obtain two values for the phase shift between book and eBook days, one for each schedule:

```{python}
#| echo: false
idx = selected_parameters.index[0]
colors = ['tab:orange', 'tab:green']
day_6_idx = np.where((time < 6*24) & (time > 5*24))[0]
day_12_idx = np.where((time < 12*24) & (time > 11*24))[0]
cbtmin_diff = np.zeros(2)

for jdx, condition in enumerate(['ebook_first', 'ebook_second']):
    plt.figure()
    data = np.load(f'data/skeldon23_on_chang14/chang14_simulation_{idx}.npz', allow_pickle=True)
    trajectory = data[f'{condition}_trajectory_states']
    if condition == 'ebook_first':
        plt.plot(time[day_6_idx] % 24, trajectory[day_6_idx, 0], color=colors[jdx], label='eBook')
        plt.plot(time[day_12_idx] % 24, trajectory[day_12_idx, 0], color=colors[jdx], linestyle='--', label='Book')
    else:
        plt.plot(time[day_6_idx] % 24, trajectory[day_6_idx, 0], color=colors[jdx], linestyle='--', label='Book')
        plt.plot(time[day_12_idx] % 24, trajectory[day_12_idx, 0], color=colors[jdx], label='eBook')
    # calculate the cbtmin difference
    features = simulation_features[(simulation_features['idx'] == idx)]
    cbtmin_1 = features[(features['day'] == 6) & (features['simulation_condition'] == condition)]['cbtmin'].to_numpy()
    cbtmin_2 = features[(features['day'] == 12) & (features['simulation_condition'] == condition)]['cbtmin'].to_numpy()
    if jdx == 0:
        cbtmin_diff[jdx] = np.mean(cbtmin_1 - cbtmin_2)
    else:
        cbtmin_diff[jdx] = np.mean(cbtmin_2 - cbtmin_1)
    # plot the phase shift
    plt.title(f'Day 6 and 12 for {condition} condition')
    plt.axvspan(6, 22, color='yellow', alpha=0.4)
    plt.ylabel('Circadian state (a.u.)') 
    plt.xlabel('Time (hours)')
    plt.legend()
    plt.show()
```

The phase shift (calculated as the CBTmin difference between each condition) is `{python} f"{cbtmin_diff[0] * 60:.2f}"` min for the eBook first condition and `{python} f"{cbtmin_diff[1] * 60:.2f}"` min for the eBook second condition.

Let's check if this is true for all parameter sets:

```{python}
#| echo: false

for condition in ['ebook_first', 'ebook_second']:
    print(f"Condition: {condition}")
    cbtmin_1 = simulation_features[(simulation_features['day'] == 6) & (simulation_features['simulation_condition'] == condition)]['cbtmin'].to_numpy()
    cbtmin_2 = simulation_features[(simulation_features['day'] == 12) & (simulation_features['simulation_condition'] == condition)]['cbtmin'].to_numpy()
    print("CBTmin time day 6:")
    print(cbtmin_1)
    print("CBTmin time day 12:")
    print(cbtmin_2)
```

we can see that except for small differences (0.005, equal to `dt`), they all have the same values.