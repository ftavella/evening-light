{
  "hash": "88358741190d2798be007b92e4d94883",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Skeldon23 model on Chang14 light schedule\nformat:\n  html:\n    code-fold: true\nexecute:\n  freeze: auto\n---\n\n---\ntitle: \"Light schedule computations\"\nexecute:\n  echo: false\n---\n\nLoad light schedules (calculated using the `calculate_light_schedules.py` script).\n\n::: {#bc5330ad .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\ndata_location = 'data/light_schedules/'\n\nlight_schedule_time = np.load(data_location + 'time.npy')\nregular_light = np.load(data_location + 'regular_light.npy')\nchang14_ebook_first_light = np.load(data_location + 'chang14_ebook_first_light.npy')\nchang14_ebook_second_light = np.load(data_location + 'chang14_ebook_second_light.npy')\n```\n:::\n\n\n\n\nAfter doing simulations for 125 parameter sets:\n\n::: {#e19b6da9 .cell execution_count=3}\n``` {.python .cell-code}\nmu_values = np.linspace(17.5, 19.5, 5)\ndelta_values = np.linspace(5.0, 9.0, 5)\nchi_values = np.linspace(7.0, 11.0, 5)\n```\n:::\n\n\nwe select only those with a sleep duration that is greater than 6.5 hours, leaving us with 61 parameter sets. The distribution of sleep duration is shown below:\n\n::: {#61c1fe20 .cell execution_count=4}\n``` {.python .cell-code}\n# histogram of sleep sleep time from selected parameters\nsleep_time = selected_parameters['sleep_time']\nplt.hist(sleep_time, bins=20, rwidth=0.8)\nxticks = np.linspace(6.5, 8.0, 7)\nplt.xticks(xticks)\nplt.xlabel('Sleep duration (hours)')\nplt.ylabel('Count')\n# Add annotation for the number of selected parameters\nplt.annotate(f'N = {selected_parameters.shape[0]}', xy=(7.85, 8))\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](skeldon23_on_chang14_files/figure-html/cell-5-output-1.png){width=581 height=429}\n:::\n:::\n\n\nFor each of these parameter sets, we simulate the model under three light schedules:\n- Regular\n- Chang14 with eBook on the first week (book on the second week)\n- Chang14 with eBook on the second week (book on the first week)\n\n\n\nWe can analyze the sleep onset for each simulation condition:\n\n::: {#05a2c559 .cell execution_count=6}\n``` {.python .cell-code}\ncolors = sns.color_palette('tab10')\nfor idx, simulation_condition in enumerate(['regular', 'ebook_first', 'ebook_second']):\n    plt.figure(idx)\n    plot_data = simulation_features[simulation_features['simulation_condition'] == simulation_condition]\n    sns.catplot(x='day', y='sleep_onset', data=plot_data, kind='box', color=colors[idx], showfliers=False)\n    sns.stripplot(x='day', y='sleep_onset', data=plot_data, color='black', alpha=0.5, dodge=True)\n    if simulation_condition == 'ebook_first':\n        plt.axvspan(3 - 2, 7 - 2, color='red', alpha=0.3, label='eBook')\n        plt.axvspan(9 - 2, 13 - 2, color='gray', alpha=0.3, label='Book')\n    elif simulation_condition == 'ebook_second':\n        plt.axvspan(3 - 2, 7 - 2, color='gray', alpha=0.3, label='Book')\n        plt.axvspan(9 - 2, 13 - 2, color='red', alpha=0.3, label='eBook')\n    plt.ylim(21.9, 23.7)\n    plt.legend()\n    plt.xlabel('Day')\n    plt.ylabel('Sleep onset (hours)')\n    plt.title(f\"Sleep onset for {simulation_condition} condition\")\n    plt.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\tavel\\AppData\\Local\\Temp\\ipykernel_3296\\3439049030.py:14: UserWarning:\n\nNo artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](skeldon23_on_chang14_files/figure-html/cell-7-output-3.png){width=495 height=490}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](skeldon23_on_chang14_files/figure-html/cell-7-output-5.png){width=487 height=490}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](skeldon23_on_chang14_files/figure-html/cell-7-output-7.png){width=495 height=490}\n:::\n:::\n\n\nAs expected the regular condition has no change in sleep onset across days (it does between different simulations). For the Chang14 light schedule, we see that the sleep onset varies over the two weeks. When the eBook is on the first week (days 2-6), sleep onset remains relatively constant for that first week. However when reading is done with a book (days 8-12), the sleep onset starts to decrease. On the contrary, when the eBook is on the second week, sleep onset starts to decrease at first (book reading), and then increases (eBook reading).\n\nThere are many parameter sets that have a regular sleep onset that is close or equal to 22 hours (time the lights go off). Those  sets tend to have little to no change when simulated under the Chang14 light schedules:\n\n::: {#83742436 .cell execution_count=7}\n``` {.python .cell-code}\n# for each idx, calculate the avg and std sleep onset for each simulation condition (average across days)\nsleep_onset_data = simulation_features.groupby(['idx', 'simulation_condition']).agg({'sleep_onset': ['mean', 'std']}).reset_index()\n\nregular_data = sleep_onset_data[sleep_onset_data['simulation_condition'] == 'regular']\nebook_first_data = sleep_onset_data[sleep_onset_data['simulation_condition'] == 'ebook_first']\nebook_second_data = sleep_onset_data[sleep_onset_data['simulation_condition'] == 'ebook_second']\n# plot regular mean vs ebook_first std\nplt.plot(regular_data['sleep_onset']['mean'], ebook_first_data['sleep_onset']['std'], 'o', alpha=0.5, color='tab:blue')\nplt.plot(regular_data['sleep_onset']['mean'], ebook_second_data['sleep_onset']['std'], 'o', alpha=0.5, color='tab:blue')\nplt.xlabel('Regular schedule sleep onset')\nplt.ylabel('Stdev of sleep onset across days')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](skeldon23_on_chang14_files/figure-html/cell-8-output-1.png){width=597 height=429}\n:::\n:::\n\n\n# Difference in sleep onset between book and ebook days\n\nAs in [@chang2014sleep], we plot the sleep latency (`sleep_onset - 22.0`) for each reading condition on the last day of reading:\n\n::: {#ecadcfdc .cell execution_count=8}\n``` {.python .cell-code}\nebook_bedtime_1 = simulation_features[(simulation_features['day'] == 6) & (simulation_features['simulation_condition'] == 'ebook_first')]['sleep_onset'].to_numpy()\nebook_bedtime_2 = simulation_features[(simulation_features['day'] == 13) & (simulation_features['simulation_condition'] == 'ebook_second')]['sleep_onset'].to_numpy()\n\nbook_bedtime_1 = simulation_features[(simulation_features['day'] == 12) & (simulation_features['simulation_condition'] == 'ebook_first')]['sleep_onset'].to_numpy()\nbook_bedtime_2 = simulation_features[(simulation_features['day'] == 6) & (simulation_features['simulation_condition'] == 'ebook_second')]['sleep_onset'].to_numpy()\n\nebook_bedtime = 60.0 * (np.concatenate([ebook_bedtime_1, ebook_bedtime_2]) - 22.0)\nbook_bedtime = 60.0 * (np.concatenate([book_bedtime_1, book_bedtime_2]) - 22.0)\n\n# boxplot of each\nsns.boxplot(data=[ebook_bedtime, book_bedtime], showfliers=False)\nsns.stripplot(data=[ebook_bedtime, book_bedtime], color='black', alpha=0.5)\nplt.ylabel('Sleep latency (min)')\nplt.xticks([0, 1], ['eBook', 'Book'])\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n([<matplotlib.axis.XTick at 0x2d9f01461d0>,\n  <matplotlib.axis.XTick at 0x2d9f00c1e50>],\n [Text(0, 0, 'eBook'), Text(1, 0, 'Book')])\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](skeldon23_on_chang14_files/figure-html/cell-9-output-2.png){width=585 height=411}\n:::\n:::\n\n\nAdditionally, we calculate the sleep onset difference (within each simulation) between the last day of each reading condition:\n\n::: {#73893e0f .cell execution_count=9}\n``` {.python .cell-code}\nebook_bedtime_1 = simulation_features[(simulation_features['day'] == 6) & (simulation_features['simulation_condition'] == 'ebook_first')]['sleep_onset'].to_numpy()\nbook_bedtime_1 = simulation_features[(simulation_features['day'] == 12) & (simulation_features['simulation_condition'] == 'ebook_first')]['sleep_onset'].to_numpy()\ndifference_1 = ebook_bedtime_1 - book_bedtime_1\n\nebook_bedtime_2 = simulation_features[(simulation_features['day'] == 12) & (simulation_features['simulation_condition'] == 'ebook_second')]['sleep_onset'].to_numpy()\nbook_bedtime_2 = simulation_features[(simulation_features['day'] == 6) & (simulation_features['simulation_condition'] == 'ebook_second')]['sleep_onset'].to_numpy()\ndifference_2 = ebook_bedtime_2 - book_bedtime_2\n\n# boxplot of difference\ndifference = np.concatenate([difference_1, difference_2])\nsns.boxplot(data=difference * 60)\nsns.stripplot(data=difference * 60, color='black', alpha=0.5)\nplt.ylabel('eBook - Book bedtime difference (min)')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](skeldon23_on_chang14_files/figure-html/cell-10-output-1.png){width=585 height=393}\n:::\n:::\n\n\n# Phase shift between book and ebook days\n\n::: {#6cbbc61a .cell execution_count=10}\n``` {.python .cell-code}\n# calculate the difference between day 13 and day 6 for cbtmin\nebook_cbtmin_1 = sleep_onset_data[(sleep_onset_data['day'] == 6) & (sleep_onset_data['reading_condition'] == 'ebook_first')]['chang14_cbtmin'].to_numpy()\nebook_cbtmin_2 = sleep_onset_data[(sleep_onset_data['day'] == 13) & (sleep_onset_data['reading_condition'] == 'ebook_first')]['chang14_cbtmin'].to_numpy()\ndifference_1 = ebook_cbtmin_1 - ebook_cbtmin_2\n\nbook_cbtmin_1 = sleep_onset_data[(sleep_onset_data['day'] == 6) & (sleep_onset_data['reading_condition'] == 'ebook_second')]['chang14_cbtmin'].to_numpy() % 24\nbook_cbtmin_2 = sleep_onset_data[(sleep_onset_data['day'] == 13) & (sleep_onset_data['reading_condition'] == 'ebook_second')]['chang14_cbtmin'].to_numpy() % 24\ndifference_2 = book_cbtmin_1 - book_cbtmin_2\n\n\ndifference = np.concatenate([difference_1, difference_2])\n# seaborn boxplot showing the dots\nsns.boxplot(data=difference * 60)\nsns.stripplot(data=difference * 60, color='black', alpha=0.5)\nplt.ylabel('Phase shift as CBTmin difference (min)')\nplt.xlabel('Reading condition')\nplt.show()\n```\n:::\n\n\n::: {#6a8eac2a .cell execution_count=11}\n``` {.python .cell-code}\nfor reading_condition in ['ebook_first', 'ebook_second']:\n    for idx in selected_parameters.index:\n        try:\n            data = np.load(f'data/skeldon23_on_chang14/chang14_simulation_{idx}.npz', allow_pickle=True)\n        except:\n            continue\n\n        regular_trajectory = data['regular_trajectory_states']\n        chang14_trajectory = data[f'{reading_condition}_trajectory_states']\n\n        regular_sleep = data['regular_sleep']\n        chang14_sleep = data[f'{reading_condition}_sleep']\n\n        day_6_idx = np.where((time < 6*24) & (time > 5*24))[0]\n        day_13_idx = np.where((time < 13*24) & (time > 12*24))[0]\n        normalized_time = np.arange(0, 24, 24/len(day_6_idx))\n\n        plt.plot(normalized_time, regular_trajectory[day_6_idx, 0], color='tab:blue')\n        plt.plot(normalized_time, regular_trajectory[day_13_idx, 0], color='tab:blue')\n        plt.plot(normalized_time, regular_sleep[day_6_idx], color='tab:blue', linestyle='--')\n        plt.plot(normalized_time, regular_sleep[day_13_idx], color='tab:blue', linestyle='--')\n        if reading_condition == 'ebook_first':\n            plt.plot(normalized_time, chang14_trajectory[day_6_idx, 0], color='tab:green')\n            plt.plot(normalized_time, chang14_trajectory[day_13_idx, 0], color='tab:red')\n        else:\n            plt.plot(normalized_time, chang14_trajectory[day_6_idx, 0], color='tab:red')\n            plt.plot(normalized_time, chang14_trajectory[day_13_idx, 0], color='tab:green')\n    plt.axvspan(6, 22, color='yellow', alpha=0.4)\n```\n:::\n\n\n::: {#82e3dd1d .cell execution_count=12}\n``` {.python .cell-code}\nfor idx in selected_parameters.index:\n    try:\n        data = np.load(f'data/skeldon23_on_chang14/chang14_simulation_{idx}.npz', allow_pickle=True)\n    except:\n        continue\n\n    regular_trajectory = data['regular_trajectory_states']\n    chang14_trajectory = data[f'{reading_condition}_trajectory_states']\n\n    regular_sleep = data['regular_sleep']\n    chang14_sleep = data[f'{reading_condition}_sleep']\n\n    first_week_idx = np.where((time < 14*24) & (time > 13*24))[0]\n    normalized_time = np.arange(0, 24, 24/len(first_week_idx))\n\n    plt.plot(normalized_time, chang14_trajectory[first_week_idx, 3])\n\nplt.title('Day 14')\nplt.ylabel('Circadian state')\nplt.xlabel('Time (hours)')\n```\n:::\n\n\n::: {#446038ba .cell execution_count=13}\n``` {.python .cell-code}\nfor idx in selected_parameters.index:\n    try:\n        data = np.load(f'data/skeldon23_on_chang14/chang14_simulation_{idx}.npz', allow_pickle=True)\n    except:\n        continue\n\n    regular_trajectory = data['regular_trajectory_states']\n    chang14_trajectory = data[f'{reading_condition}_trajectory_states']\n\n    regular_sleep = data['regular_sleep']\n    chang14_sleep = data[f'{reading_condition}_sleep']\n\n    first_week_idx = np.where((time < 14*24) & (time > 13*24))[0]\n    normalized_time = np.arange(0, 24, 24/len(first_week_idx))\n\n    plt.plot(normalized_time, chang14_sleep[first_week_idx])\n\nplt.title('Day 14')\nplt.ylabel('Sleep')\nplt.xlabel('Time (hours)')\n```\n:::\n\n\nSo I think I know the reason for these plots, the sleep homeostat only feeds back to the circadian state by changing the light the model receives. Given that we force it to be awake when there's light, there's actually no change in light schedule for each simulation and that causes the circadian state to be the same for each simulation.\n-->\n\n",
    "supporting": [
      "skeldon23_on_chang14_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}