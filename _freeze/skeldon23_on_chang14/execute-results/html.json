{
  "hash": "7390aa7a9e0376dbd10d5b126368b584",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Skeldon23 model on Chang14 light schedule\nformat:\n  html:\n    code-fold: true\nexecute:\n  freeze: auto\n---\n\n---\ntitle: \"Light schedule computations\"\nexecute:\n  echo: false\n---\n\nLoad light schedules (calculated using the `calculate_light_schedules.py` script).\n\n::: {#01712502 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\ndata_location = 'data/light_schedules/'\n\nlight_schedule_time = np.load(data_location + 'time.npy')\nregular_light = np.load(data_location + 'regular_light.npy')\nchang14_ebook_first_light = np.load(data_location + 'chang14_ebook_first_light.npy')\nchang14_ebook_second_light = np.load(data_location + 'chang14_ebook_second_light.npy')\n```\n:::\n\n\n::: {#9e6e0be3 .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom circadian.models import Skeldon23\n\ntime = light_schedule_time #TODO: Clean this up\n\n# TODO: Implement these functions on `circadian`\ndef circadian_modulation_of_sleep(model, trajectory_states):\n    x = trajectory_states[:, 0]\n    xc = trajectory_states[:, 1]\n    linear_term = model.c20 + model.alpha21 * xc + model.alpha22 * x\n    quadratic_term = model.beta21 * xc * xc + model.beta22 * xc * x + model.beta23 * x * x\n    C = linear_term + quadratic_term\n    return C\n\ndef H_thresholds(model, trajectory_states):\n    C = circadian_modulation_of_sleep(model, trajectory_states)\n    H_plus = model.H0 + 0.5 * model.Delta + model.ca * C\n    H_minus = model.H0 - 0.5 * model.Delta + model.ca * C \n    return H_plus, H_minus\n\n# Load selected parameters\nselected_parameters = pd.read_csv('data/parameter_exploration/selected_parameters.csv', index_col=0)\n\n# Calculate the bedtime for each day\nsleep_onset_data = pd.DataFrame()\nfor reading_condition in ['ebook_first', 'ebook_second']:\n    for idx in selected_parameters.index:\n        try:\n            data = np.load(f'data/skeldon23_on_chang14/chang14_simulation_{idx}.npz', allow_pickle=True)\n        except:\n            continue\n\n        regular_sleep = data['regular_sleep']\n        chang14_sleep = data[f'{reading_condition}_sleep']\n\n        regular_sleep_changes = np.where(np.diff(regular_sleep) == 1)[0]\n        chang14_sleep_changes = np.where(np.diff(chang14_sleep) == 1)[0]\n        regular_sleep_changes_time = time[regular_sleep_changes]\n        chang14_sleep_changes_time = time[chang14_sleep_changes]\n\n        # don't count last day's sleep onset\n        regular_sleep_changes_time = regular_sleep_changes_time[:-1]\n        chang14_sleep_changes_time = chang14_sleep_changes_time[:-1]\n\n        data_subset = {\n            'idx': idx,\n            'day': np.arange(2, 15),\n            'regular_sleep_onset': regular_sleep_changes_time % 24,\n            'chang14_sleep_onset': chang14_sleep_changes_time % 24,\n            'reading_condition': reading_condition\n        }\n        sleep_onset_data = pd.concat([sleep_onset_data, pd.DataFrame(data_subset)])\n```\n:::\n\n\n::: {#884a0951 .cell execution_count=3}\n``` {.python .cell-code}\n# Plot sleep onset for each idx\nfor reading_condition in ['ebook_first', 'ebook_second']:\n    for idx in selected_parameters.index:\n        plot_data = sleep_onset_data[(sleep_onset_data['idx'] == idx) & (sleep_onset_data['reading_condition'] == reading_condition)]\n        # plt.plot(plot_data['day'], plot_data['sleep_difference'], 'o-', color='tab:blue', alpha=0.5)\n        plt.plot(plot_data['day'], plot_data['chang14_sleep_onset'], 'o-', color='tab:blue', alpha=0.5)\n    # color first week and second week differently\n    if reading_condition == 'ebook_first':\n        plt.axvspan(2, 7, color='red', alpha=0.3, label='eBook')\n        plt.axvspan(8, 14, color='green', alpha=0.3, label='Book')\n    else:\n        plt.axvspan(2, 7, color='green', alpha=0.3, label='Book')\n        plt.axvspan(8, 14, color='red', alpha=0.3, label='eBook')\n\n\n    plt.legend()\n    plt.ylabel('Chang14 bedtime - Regular bedtime (hours)')\n    plt.xlabel('Day')\n    plt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](skeldon23_on_chang14_files/figure-html/cell-4-output-1.png){width=606 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](skeldon23_on_chang14_files/figure-html/cell-4-output-2.png){width=597 height=429}\n:::\n:::\n\n\n::: {#6bf95eb4 .cell execution_count=4}\n``` {.python .cell-code}\nsleep_onset_data['sleep_difference'] = sleep_onset_data['chang14_sleep_onset'] - sleep_onset_data['regular_sleep_onset']\n# Calculate the std of sleep difference for each idx and reading condition\nstd_sleep_difference = sleep_onset_data.groupby(['idx', 'reading_condition']).std().reset_index()\nstd_sleep_difference = std_sleep_difference.rename(columns={'sleep_difference': 'std_sleep_difference'})\n# keep idx, reading_condition, and std_sleep_difference\nstd_sleep_difference = std_sleep_difference[['idx', 'reading_condition', 'std_sleep_difference']]\n# calculate the mean of regular sleep onset for each idx and reading condition\nmean_regular_sleep_onset = sleep_onset_data.groupby(['idx', 'reading_condition']).mean().reset_index()\nmean_regular_sleep_onset = mean_regular_sleep_onset.rename(columns={'regular_sleep_onset': 'mean_regular_sleep_onset'})\n# keep idx, reading_condition, and mean_regular_sleep_onset\nmean_regular_sleep_onset = mean_regular_sleep_onset[['idx', 'reading_condition', 'mean_regular_sleep_onset']]\n# merge the two dataframes\nsleep_difference_statistics = pd.merge(std_sleep_difference, mean_regular_sleep_onset, on=['idx', 'reading_condition'])\nplt.plot(sleep_difference_statistics['std_sleep_difference'], sleep_difference_statistics['mean_regular_sleep_onset'], 'o', alpha=0.5)\nplt.xlabel('Stdev of (Chang14 - Regular bedtime)')\nplt.ylabel('Regular sleep bedtime')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](skeldon23_on_chang14_files/figure-html/cell-5-output-1.png){width=604 height=429}\n:::\n:::\n\n\n::: {#e28b2969 .cell execution_count=5}\n``` {.python .cell-code}\n# histogram of sleep sleep time from selected parameters\nsleep_time = selected_parameters['sleep_time']\nplt.hist(sleep_time, bins=20, rwidth=0.8)\nplt.xlabel('Sleep duration (hours)')\nplt.ylabel('Count')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](skeldon23_on_chang14_files/figure-html/cell-6-output-1.png){width=577 height=429}\n:::\n:::\n\n\n::: {#0169f27f .cell execution_count=6}\n``` {.python .cell-code}\n# calculate the difference between day 13 and day 6\nbedtime_day_6_ebook_first = sleep_onset_data[(sleep_onset_data['day'] == 6) & (sleep_onset_data['reading_condition'] == 'ebook_first')]['chang14_sleep_onset'].to_numpy()\nbedtime_day_13_ebook_first = sleep_onset_data[(sleep_onset_data['day'] == 13) & (sleep_onset_data['reading_condition'] == 'ebook_first')]['chang14_sleep_onset'].to_numpy()\ndifference_1 = bedtime_day_6_ebook_first - bedtime_day_13_ebook_first\n\nbedtime_day_6_ebook_second = sleep_onset_data[(sleep_onset_data['day'] == 6) & (sleep_onset_data['reading_condition'] == 'ebook_second')]['chang14_sleep_onset'].to_numpy()\nbedtime_day_13_ebook_second = sleep_onset_data[(sleep_onset_data['day'] == 13) & (sleep_onset_data['reading_condition'] == 'ebook_second')]['chang14_sleep_onset'].to_numpy()\ndifference_2 = bedtime_day_13_ebook_second - bedtime_day_6_ebook_second\n\ndifference = np.concatenate([difference_1, difference_2])\n\n# boxplot of difference\nsns.boxplot(data=difference * 60)\nsns.stripplot(data=difference * 60, color='black', alpha=0.5)\nplt.ylabel('eBook - Book bedtime difference (min)')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](skeldon23_on_chang14_files/figure-html/cell-7-output-1.png){width=585 height=393}\n:::\n:::\n\n\n::: {#dd626702 .cell execution_count=7}\n``` {.python .cell-code}\n# ebook bedtimes are day 6 on ebook first and day 13 on ebook second\nebook_bedtime_1 = sleep_onset_data[(sleep_onset_data['day'] == 6) & (sleep_onset_data['reading_condition'] == 'ebook_first')]\nebook_bedtime_2 = sleep_onset_data[(sleep_onset_data['day'] == 13) & (sleep_onset_data['reading_condition'] == 'ebook_second')]\nebook_bedtime = pd.concat([ebook_bedtime_1, ebook_bedtime_2])\nbook_bedtime_1 = sleep_onset_data[(sleep_onset_data['day'] == 6) & (sleep_onset_data['reading_condition'] == 'ebook_second')]\nbook_bedtime_2 = sleep_onset_data[(sleep_onset_data['day'] == 13) & (sleep_onset_data['reading_condition'] == 'ebook_first')]\nbook_bedtime = pd.concat([book_bedtime_1, book_bedtime_2])\ndata_plot_1 = pd.DataFrame({\n    'condition': 'eBook',\n    'sleep_onset': ebook_bedtime['chang14_sleep_onset'],\n})\ndata_plot_2 = pd.DataFrame({\n    'condition': 'Book',\n    'sleep_onset': book_bedtime['chang14_sleep_onset'],\n})\ndata_plot = pd.concat([data_plot_1, data_plot_2])\n# seaborn boxplot showing the dots\nsns.boxplot(x='condition', y='sleep_onset', data=data_plot, showfliers=False)\nsns.stripplot(x='condition', y='sleep_onset', data=data_plot, color='black', alpha=0.5)\nplt.ylabel('Bedtime (hours)')\nplt.xlabel('Reading condition')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](skeldon23_on_chang14_files/figure-html/cell-8-output-1.png){width=597 height=429}\n:::\n:::\n\n\n",
    "supporting": [
      "skeldon23_on_chang14_files"
    ],
    "filters": [],
    "includes": {}
  }
}