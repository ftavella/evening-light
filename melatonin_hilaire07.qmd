---
title: "MelatoninHilaire07 model"
format:
  html:
    code-fold: true
jupyter: python3
execute:
  freeze: auto
---
WIP: Most recent simulation

```{python}
import numpy as np
import matplotlib.pyplot as plt
from circadian.lights import LightSchedule
from circadian.models import MelatoninHilaire07

schedule = LightSchedule.Regular(1000.0, 8.0, 16.0)
dt = 0.01 # hours
time = np.arange(0, 24 * 5, dt)
light = schedule(time)
model = MelatoninHilaire07(params={'a': 10.0, 'delta': 1000.0, 'r': 1000.0, 'betaIP': 1.0, 'betaCP': 1.0})
trajectory = model.integrate(time, input=light)

x = trajectory.states[:, 0]
xc = trajectory.states[:, 1]
H1 = trajectory.states[:, 3]
H2 = trajectory.states[:, 4]
phase = np.arctan2(xc, x)
fig, axs = plt.subplots(4, 1, sharex=True, figsize=(12, 8))
# x and xc
axs[0].plot(time, x, label='x')
axs[0].plot(time, xc, label='xc')
axs[0].legend()
# phase
axs[1].plot(time, phase, label='Phase')
axs[1].axhline(y=model.phi_on, color='gray', linestyle='--')
axs[1].axhline(y=model.phi_off, color='gray', linestyle='--')
axs[1].legend()
# on/off term
places_on_1 = np.where(phase < model.phi_on)
places_on_2 = np.where(phase > model.phi_off)
synthesis_on = np.zeros_like(phase)
synthesis_on[places_on_1] = 1.0
synthesis_on[places_on_2] = 1.0
axs[2].plot(time, synthesis_on, label='Melatonin synthesis on')
axs[2].legend()
# melatonin
axs[3].plot(time, H1, label='Pineal melatonin')
axs[3].plot(time, H2, label='Plasma melatonin')
axs[3].legend()
axs[3].set_xlabel('Time (hours)')
plt.show()
```