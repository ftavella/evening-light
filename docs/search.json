[
  {
    "objectID": "skeldon23_parameter_exploration.html",
    "href": "skeldon23_parameter_exploration.html",
    "title": "Skeldon23 parameter exploration",
    "section": "",
    "text": "WIP",
    "crumbs": [
      "Sleep model",
      "Parameter exploration"
    ]
  },
  {
    "objectID": "skeldon23_forced_wakeup.html",
    "href": "skeldon23_forced_wakeup.html",
    "title": "Skeldon23 model forced wake up implementation",
    "section": "",
    "text": "WIP",
    "crumbs": [
      "Sleep model",
      "Forced wake-up"
    ]
  },
  {
    "objectID": "melatonin_hilaire07.html",
    "href": "melatonin_hilaire07.html",
    "title": "MelatoninHilaire07 model",
    "section": "",
    "text": "WIP: Most recent simulation\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom circadian.lights import LightSchedule\nfrom circadian.models import MelatoninHilaire07\n\nschedule = LightSchedule.Regular(1000.0, 8.0, 16.0)\ndt = 0.01 # hours\ntime = np.arange(0, 24 * 5, dt)\nlight = schedule(time)\nmodel = MelatoninHilaire07(params={'a': 10.0, 'delta': 1000.0, 'r': 1000.0, 'betaIP': 1.0, 'betaCP': 1.0})\ntrajectory = model.integrate(time, input=light)\n\nx = trajectory.states[:, 0]\nxc = trajectory.states[:, 1]\nH1 = trajectory.states[:, 3]\nH2 = trajectory.states[:, 4]\nphase = np.arctan2(xc, x)\nfig, axs = plt.subplots(4, 1, sharex=True, figsize=(12, 8))\n# x and xc\naxs[0].plot(time, x, label='x')\naxs[0].plot(time, xc, label='xc')\naxs[0].legend()\n# phase\naxs[1].plot(time, phase, label='Phase')\naxs[1].axhline(y=model.phi_on, color='gray', linestyle='--')\naxs[1].axhline(y=model.phi_off, color='gray', linestyle='--')\naxs[1].legend()\n# on/off term\nplaces_on_1 = np.where(phase &lt; model.phi_on)\nplaces_on_2 = np.where(phase &gt; model.phi_off)\nsynthesis_on = np.zeros_like(phase)\nsynthesis_on[places_on_1] = 1.0\nsynthesis_on[places_on_2] = 1.0\naxs[2].plot(time, synthesis_on, label='Melatonin synthesis on')\naxs[2].legend()\n# melatonin\naxs[3].plot(time, H1, label='Pineal melatonin')\naxs[3].plot(time, H2, label='Plasma melatonin')\naxs[3].legend()\naxs[3].set_xlabel('Time (hours)')\nplt.show()",
    "crumbs": [
      "Melatonin suppression model",
      "Melatonin suppression model"
    ]
  },
  {
    "objectID": "chang14_light_schedule.html",
    "href": "chang14_light_schedule.html",
    "title": "Light schedule computations",
    "section": "",
    "text": "Chang14 light schedule implementation\nLoad light schedules (calculated using the calculate_light_schedules.py script).\n\n\nCode\nimport numpy as np\n\ndata_location = 'data/light_schedules/'\n\nlight_schedule_time = np.load(data_location + 'time.npy')\nregular_light = np.load(data_location + 'regular_light.npy')\nchang14_ebook_first_light = np.load(data_location + 'chang14_ebook_first_light.npy')\nchang14_ebook_second_light = np.load(data_location + 'chang14_ebook_second_light.npy')\n\n\n\n\nCode\nimport matplotlib.pyplot as plt\n\nplt.figure(1)\nplt.plot(light_schedule_time, chang14_ebook_first_light)\nplt.figure(2)\nplt.plot(light_schedule_time, chang14_ebook_second_light)\nplt.show()",
    "crumbs": [
      "Chang et al. 2014",
      "Light schedule"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This document explores the effect of evening light on sleep through mathematical modeling",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "chang14_experimental_results.html",
    "href": "chang14_experimental_results.html",
    "title": "Chang et al.Â 2014",
    "section": "",
    "text": "Main article findings and results to be replicated\nWIP: Plots that we intend to reproduce from the paper.\n\n\n\nFigure 1: Light schedule\n\n\n\n\n\nFigure 2: Phase shift\n\n\n\n\n\nFigure 3: Sleep",
    "crumbs": [
      "Chang et al. 2014",
      "Experimental results"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Effect of evening light on sleep",
    "section": "",
    "text": "Introduction\nMathematical modeling can help us understand how evening light affects our sleep. Throughout this document we use the Skeldon23() model from the circadian package. The model tells us how the circadian state and sleep homeostat evolve over time. The only input to the model is the light received at each timepoint:\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom circadian.lights import LightSchedule\n\ndt = 0.01 # hours\ntime = np.arange(0, 48, dt)\nschedule = LightSchedule.Regular(1000.0, 6.0, 22.0)\nlight = schedule(time)\n\nplt.plot(time, light)\nplt.xlabel('Time (hours)')\nplt.ylabel('Light intensity')\nplt.show()\n\n\n\n\n\nLight schedule\n\n\n\n\n\n\nCode\nfrom circadian.models import Skeldon23\nmodel = Skeldon23()\ntrajectory = model.integrate(time, input=light)\nx = trajectory.states[:, 0]\n\nplt.plot(time, x)\nplt.xlabel('Time (hours)')\nplt.ylabel('Circadian state (a.u.)')\nplt.show()\n\n\n\n\n\nCircadian state",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "melatonin_hilaire07_on_chang14.html",
    "href": "melatonin_hilaire07_on_chang14.html",
    "title": "MelatoninHilaire07 under Chang14 light schedule",
    "section": "",
    "text": "MelatoninHilaire07 under Chang14 light schedule\nWIP",
    "crumbs": [
      "Melatonin suppression model",
      "Simulations on Chang14 light schedule"
    ]
  },
  {
    "objectID": "skeldon23_on_chang14.html",
    "href": "skeldon23_on_chang14.html",
    "title": "Light schedule computations",
    "section": "",
    "text": "Load light schedules (calculated using the calculate_light_schedules.py script).\n\n\nCode\nimport numpy as np\n\ndata_location = 'data/light_schedules/'\n\nlight_schedule_time = np.load(data_location + 'time.npy')\nregular_light = np.load(data_location + 'regular_light.npy')\nchang14_ebook_first_light = np.load(data_location + 'chang14_ebook_first_light.npy')\nchang14_ebook_second_light = np.load(data_location + 'chang14_ebook_second_light.npy')\n\n\n\n\nCode\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom circadian.models import Skeldon23\n\ntime = light_schedule_time #TODO: Clean this up\n\n# TODO: Implement these functions on `circadian`\ndef circadian_modulation_of_sleep(model, trajectory_states):\n    x = trajectory_states[:, 0]\n    xc = trajectory_states[:, 1]\n    linear_term = model.c20 + model.alpha21 * xc + model.alpha22 * x\n    quadratic_term = model.beta21 * xc * xc + model.beta22 * xc * x + model.beta23 * x * x\n    C = linear_term + quadratic_term\n    return C\n\ndef H_thresholds(model, trajectory_states):\n    C = circadian_modulation_of_sleep(model, trajectory_states)\n    H_plus = model.H0 + 0.5 * model.Delta + model.ca * C\n    H_minus = model.H0 - 0.5 * model.Delta + model.ca * C \n    return H_plus, H_minus\n\n# Load selected parameters\nselected_parameters = pd.read_csv('data/parameter_exploration/selected_parameters.csv', index_col=0)\n\n# Calculate the bedtime for each day\nsleep_onset_data = pd.DataFrame()\nfor reading_condition in ['ebook_first', 'ebook_second']:\n    for idx in selected_parameters.index:\n        try:\n            data = np.load(f'data/skeldon23_on_chang14/chang14_simulation_{idx}.npz', allow_pickle=True)\n        except:\n            continue\n\n        regular_sleep = data['regular_sleep']\n        chang14_sleep = data[f'{reading_condition}_sleep']\n\n        regular_sleep_changes = np.where(np.diff(regular_sleep) == 1)[0]\n        chang14_sleep_changes = np.where(np.diff(chang14_sleep) == 1)[0]\n        regular_sleep_changes_time = time[regular_sleep_changes]\n        chang14_sleep_changes_time = time[chang14_sleep_changes]\n\n        # don't count last day's sleep onset\n        regular_sleep_changes_time = regular_sleep_changes_time[:-1]\n        chang14_sleep_changes_time = chang14_sleep_changes_time[:-1]\n\n        data_subset = {\n            'idx': idx,\n            'day': np.arange(2, 15),\n            'regular_sleep_onset': regular_sleep_changes_time % 24,\n            'chang14_sleep_onset': chang14_sleep_changes_time % 24,\n            'reading_condition': reading_condition\n        }\n        sleep_onset_data = pd.concat([sleep_onset_data, pd.DataFrame(data_subset)])\n\n\n\n\nCode\n# Plot sleep onset for each idx\nfor reading_condition in ['ebook_first', 'ebook_second']:\n    for idx in selected_parameters.index:\n        plot_data = sleep_onset_data[(sleep_onset_data['idx'] == idx) & (sleep_onset_data['reading_condition'] == reading_condition)]\n        # plt.plot(plot_data['day'], plot_data['sleep_difference'], 'o-', color='tab:blue', alpha=0.5)\n        plt.plot(plot_data['day'], plot_data['chang14_sleep_onset'], 'o-', color='tab:blue', alpha=0.5)\n    # color first week and second week differently\n    if reading_condition == 'ebook_first':\n        plt.axvspan(2, 7, color='red', alpha=0.3, label='eBook')\n        plt.axvspan(8, 14, color='green', alpha=0.3, label='Book')\n    else:\n        plt.axvspan(2, 7, color='green', alpha=0.3, label='Book')\n        plt.axvspan(8, 14, color='red', alpha=0.3, label='eBook')\n\n\n    plt.legend()\n    plt.ylabel('Chang14 bedtime - Regular bedtime (hours)')\n    plt.xlabel('Day')\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsleep_onset_data['sleep_difference'] = sleep_onset_data['chang14_sleep_onset'] - sleep_onset_data['regular_sleep_onset']\n# Calculate the std of sleep difference for each idx and reading condition\nstd_sleep_difference = sleep_onset_data.groupby(['idx', 'reading_condition']).std().reset_index()\nstd_sleep_difference = std_sleep_difference.rename(columns={'sleep_difference': 'std_sleep_difference'})\n# keep idx, reading_condition, and std_sleep_difference\nstd_sleep_difference = std_sleep_difference[['idx', 'reading_condition', 'std_sleep_difference']]\n# calculate the mean of regular sleep onset for each idx and reading condition\nmean_regular_sleep_onset = sleep_onset_data.groupby(['idx', 'reading_condition']).mean().reset_index()\nmean_regular_sleep_onset = mean_regular_sleep_onset.rename(columns={'regular_sleep_onset': 'mean_regular_sleep_onset'})\n# keep idx, reading_condition, and mean_regular_sleep_onset\nmean_regular_sleep_onset = mean_regular_sleep_onset[['idx', 'reading_condition', 'mean_regular_sleep_onset']]\n# merge the two dataframes\nsleep_difference_statistics = pd.merge(std_sleep_difference, mean_regular_sleep_onset, on=['idx', 'reading_condition'])\nplt.plot(sleep_difference_statistics['std_sleep_difference'], sleep_difference_statistics['mean_regular_sleep_onset'], 'o', alpha=0.5)\nplt.xlabel('Stdev of (Chang14 - Regular bedtime)')\nplt.ylabel('Regular sleep bedtime')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# histogram of sleep sleep time from selected parameters\nsleep_time = selected_parameters['sleep_time']\nplt.hist(sleep_time, bins=20, rwidth=0.8)\nplt.xlabel('Sleep duration (hours)')\nplt.ylabel('Count')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# calculate the difference between day 13 and day 6\nbedtime_day_6_ebook_first = sleep_onset_data[(sleep_onset_data['day'] == 6) & (sleep_onset_data['reading_condition'] == 'ebook_first')]['chang14_sleep_onset'].to_numpy()\nbedtime_day_13_ebook_first = sleep_onset_data[(sleep_onset_data['day'] == 13) & (sleep_onset_data['reading_condition'] == 'ebook_first')]['chang14_sleep_onset'].to_numpy()\ndifference_1 = bedtime_day_6_ebook_first - bedtime_day_13_ebook_first\n\nbedtime_day_6_ebook_second = sleep_onset_data[(sleep_onset_data['day'] == 6) & (sleep_onset_data['reading_condition'] == 'ebook_second')]['chang14_sleep_onset'].to_numpy()\nbedtime_day_13_ebook_second = sleep_onset_data[(sleep_onset_data['day'] == 13) & (sleep_onset_data['reading_condition'] == 'ebook_second')]['chang14_sleep_onset'].to_numpy()\ndifference_2 = bedtime_day_13_ebook_second - bedtime_day_6_ebook_second\n\ndifference = np.concatenate([difference_1, difference_2])\n\n# boxplot of difference\nsns.boxplot(data=difference * 60)\nsns.stripplot(data=difference * 60, color='black', alpha=0.5)\nplt.ylabel('eBook - Book bedtime difference (min)')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# ebook bedtimes are day 6 on ebook first and day 13 on ebook second\nebook_bedtime_1 = sleep_onset_data[(sleep_onset_data['day'] == 6) & (sleep_onset_data['reading_condition'] == 'ebook_first')]\nebook_bedtime_2 = sleep_onset_data[(sleep_onset_data['day'] == 13) & (sleep_onset_data['reading_condition'] == 'ebook_second')]\nebook_bedtime = pd.concat([ebook_bedtime_1, ebook_bedtime_2])\nbook_bedtime_1 = sleep_onset_data[(sleep_onset_data['day'] == 6) & (sleep_onset_data['reading_condition'] == 'ebook_second')]\nbook_bedtime_2 = sleep_onset_data[(sleep_onset_data['day'] == 13) & (sleep_onset_data['reading_condition'] == 'ebook_first')]\nbook_bedtime = pd.concat([book_bedtime_1, book_bedtime_2])\ndata_plot_1 = pd.DataFrame({\n    'condition': 'eBook',\n    'sleep_onset': ebook_bedtime['chang14_sleep_onset'],\n})\ndata_plot_2 = pd.DataFrame({\n    'condition': 'Book',\n    'sleep_onset': book_bedtime['chang14_sleep_onset'],\n})\ndata_plot = pd.concat([data_plot_1, data_plot_2])\n# seaborn boxplot showing the dots\nsns.boxplot(x='condition', y='sleep_onset', data=data_plot, showfliers=False)\nsns.stripplot(x='condition', y='sleep_onset', data=data_plot, color='black', alpha=0.5)\nplt.ylabel('Bedtime (hours)')\nplt.xlabel('Reading condition')\nplt.show()",
    "crumbs": [
      "Sleep model",
      "Simulations on Chang14 light schedule"
    ]
  }
]