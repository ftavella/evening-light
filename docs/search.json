[
  {
    "objectID": "skeldon23_parameter_exploration.html",
    "href": "skeldon23_parameter_exploration.html",
    "title": "Skeldon23 parameter exploration",
    "section": "",
    "text": "WIP",
    "crumbs": [
      "Sleep model",
      "Parameter exploration"
    ]
  },
  {
    "objectID": "skeldon23_forced_wakeup.html",
    "href": "skeldon23_forced_wakeup.html",
    "title": "Skeldon23 model forced wake up implementation",
    "section": "",
    "text": "WIP",
    "crumbs": [
      "Sleep model",
      "Forced wake-up"
    ]
  },
  {
    "objectID": "melatonin_breslow13.html",
    "href": "melatonin_breslow13.html",
    "title": "Breslow13 model",
    "section": "",
    "text": "We implemented the melatonin supression model from Breslow et al.¬†2013 (Breslow et al. 2013) that expands and improves a previous model (St Hilaire et al. 2007). The circadian part of the model is given by:\n\\[\n\\frac{dn}{dt} = 60 \\left[ \\alpha (1-n) - \\beta n \\right]\n\\]\nwhere\n\\[\n\\alpha = \\alpha_0 \\left( \\frac{I}{I_0} \\right)^p \\frac{I}{I + I_1}\n\\]\n\nüö® In the article, the multiplication by 60 on \\(\\frac{dn}{dt}\\) is missing\n\n\\[\n\\frac{dx}{dt} = \\frac{1}{\\kappa} \\left[ x_c + \\gamma \\left( \\frac{x}{3} + \\frac{4x}{3} - \\frac{256}{105} x^7 \\right) + B + \\eta M \\right]\n\\]\n\\[\n\\frac{dx_c}{dt} = \\frac{1}{\\kappa} \\left\\{ \\frac{B x_c}{3} - x \\left[\\left( \\frac{24}{f \\tau_c} \\right)^2  + K B \\right] - \\xi M \\right\\}\n\\]\n\nüö® In the article, the brackets after \\(-x\\) are missing, which is not correct based on Hilaire07 and Jewett00 from circadian\n\nwhere\n\\[\nM = \\frac{M_{\\text{max}}}{1 + \\exp(\\frac{H_{\\text{sat} - H_2}}{\\sigma})}\n\\]\nMelatonin dynamics are given by\n\\[\n\\frac{dH_{1}}{dt} = - \\beta_{IP} H_{1} + A(\\phi) (1 - mB) S(H1, B)\n\\]\n\\[\n\\frac{dH_{2}}{dt} = \\beta_{IP} H_{1} - \\beta_{CP} H_{2} + \\beta_{AP} H_{3}\n\\]\n\\[\n\\frac{dH_{3}}{dt} = - \\beta_{AP} H_{3}\n\\]\nwhere \\(H_{1}\\) is the pineal melatonin, \\(H_{2}\\) is the plasma melatonin, and \\(H_{3}\\) is the exogenous melatonin. Also\n\\[\n\\phi = \\tan^{-1} \\left( \\frac{x}{x_c} \\right)\n\\]\n\nüö® Note that this is different from (St Hilaire et al. 2007; Abeysuriya et al. 2018) where they do \\(\\tan^{-1}(x_c/x)\\).\n\n\\[\nS(H_1, B) =  \n\\begin{cases}\n  0 & \\text{if} \\ \\ \\ H_1 &lt; 0.001 \\ \\ \\text{and} \\ \\ (1 - mB) &lt; 0 \\\\\n  1 & \\text{otherwise}\n\\end{cases}\n\\]\nthe latter being a function to avoid negative values of \\(H_1\\) for sudden spikes in light. Melatonin synthesis is given by\n\\[\nA(\\phi) =\n\\begin{cases}\n  a\\left[ \\frac{1 - e^{-\\delta M_{2\\pi}(\\phi_{\\text{on} - \\phi})}}{1 - e^{-\\delta M_{2\\pi}(\\phi_{\\text{on}} - \\phi_{\\text{off}})}} \\right] & \\text{if} \\ \\ \\ \\phi &lt; \\phi_{\\text{on}} \\ \\ \\ \\ \\text{and} \\ \\ \\ \\ \\phi &gt; \\phi_{\\text{off}} \\\\\n  ae^{-r M_{2\\pi}(\\phi_{\\text{on} - \\phi_{\\text{off}}})} & \\text{if} \\ \\ \\  \\phi_{\\text{on}} &lt; \\phi &lt; \\phi_{\\text{off}}\n\\end{cases}\n\\]\nwhere \\(M_{2\\pi}\\) is the modulo function.\n\nüö® The value of the parameter \\(K\\) is not on the article but it can be taken to be 0.55 based on Jewet99 and Hilaire07\n\n\nüö® Parameters on the paper are given in units of seconds. So we have to convert them to hours to match all the previous models on circadian. We multiplied \\(\\beta_{IP}\\), \\(\\beta_{CP}\\), \\(\\beta_{AP}\\), and \\(a\\) by 3600.\n\n\nüö® Phase thresholds on the paper are given outside the range \\([-\\pi, \\pi]\\) but our phase calculation lies within that range. So we do \\(\\hat{\\phi_{\\text{on}}} = \\phi_{\\text{on}} - 2\\pi\\) (same for \\(\\phi_{\\text{off}}\\))\n\n\n\nCode\nmodel = Breslow13()\ntrajectory = model.integrate(time, input=light)\n\nx = trajectory.states[:, 0]\nxc = trajectory.states[:, 1]\nH1 = trajectory.states[:, 3]\nH2 = trajectory.states[:, 4]\nphase = np.arctan2(x, xc)\n\nfig, axs = plt.subplots(3, 1, sharex=True, figsize=(12, 8))\n\n# x, xc, and light\np_x = axs[0].plot(time, x, label='x')\np_xc = axs[0].plot(time, xc, label='xc')\nlight_changes = np.diff(light)\nlight_on = np.where(light_changes &gt; 0)[0]\nlight_off = np.where(light_changes &lt; 0)[0]\nlight_off = np.append(light_off, len(light) - 1)\nfor on, off in zip(light_on, light_off):\n    axs[0].axvspan(time[on], time[off], color='yellow', alpha=0.4)\nyellow_patch = plt.Rectangle((0, 0), 1, 1, fc=\"yellow\", alpha=0.4)\naxs[0].legend([p_x[0], p_xc[0], yellow_patch], ['x', 'xc', 'Light'],\n              loc='upper left')\naxs[0].set_ylabel('Circadian state (a.u.)')\n\n# phase\naxs[1].plot(time, phase, label='Phase')\naxs[1].axhline(y=model.phi_on, color='gray', linestyle='--',)\naxs[1].axhline(y=model.phi_off, color='gray', linestyle='--',)\nplaces_on_1 = phase &lt; model.phi_on\nplaces_on_2 = phase &gt; model.phi_off\nplaces_on = np.where(np.logical_and(places_on_1,\n                                    places_on_2))[0]\nsynthesis_on = np.zeros_like(phase)\nsynthesis_on[places_on] = 1.0\nsynthesis_changes = np.diff(synthesis_on)\non_places = np.where(synthesis_changes &gt; 0)[0]\noff_places = np.where(synthesis_changes &lt; 0)[0]\nfor on, off in zip(on_places, off_places):\n    axs[1].axvspan(time[on], time[off], color='gray', alpha=0.4)\nfor on, off in zip(light_on, light_off):\n    axs[1].axvspan(time[on], time[off], color='yellow', alpha=0.4)\ngray_patch = plt.Rectangle((0, 0), 1, 1, fc=\"gray\", alpha=0.4)\naxs[1].legend([gray_patch], ['Synthesis on'], loc='upper left')\naxs[1].set_ylabel('Phase ' + r'$(\\tan^{-1}(x/x_c))$')\naxs[1].set_yticks(np.linspace(-np.pi, np.pi, 5))\naxs[1].set_yticklabels(['$-\\pi$', '$-\\pi/2$', '0', '$\\pi/2$', '$\\pi$'])\n\n# melatonin\naxs[2].plot(time, H1, label='Pineal')\naxs[2].plot(time, H2, label='Plasma')\nfor on, off in zip(light_on, light_off):\n    axs[2].axvspan(time[on], time[off], color='yellow', alpha=0.4)\naxs[2].legend(loc='upper left')\naxs[2].set_xlabel('Time (hours)')\naxs[2].set_ylabel('Melatonin (pmol/L)')\nplt.show()\n\n\n\n\n\nModel simulation\n\n\n\n\n\nüö® We are getting really low values of peak melatonin (based on (St Hilaire et al. 2007) it should be more around 300). We need to find out why.\n\n\n\n\n\nReferences\n\nAbeysuriya, Romesh G., Steven W. Lockley, Peter A. Robinson, and Svetlana Postnova. 2018. ‚ÄúA Unified Model of Melatonin, 6-Sulfatoxymelatonin, and Sleep Dynamics.‚Äù Journal of Pineal Research 64 (4): e12474. https://doi.org/10.1111/jpi.12474.\n\n\nBreslow, Emily R., Andrew J. K. Phillips, Jean M. Huang, Melissa A. St. Hilaire, and Elizabeth B. Klerman. 2013. ‚ÄúA Mathematical Model of the Circadian Phase-Shifting Effects of Exogenous Melatonin.‚Äù Journal of Biological Rhythms 28 (1): 79‚Äì89. https://doi.org/10.1177/0748730412468081.\n\n\nSt Hilaire, Melissa A., Claude Gronfier, Jamie M. Zeitzer, and Elizabeth B. Klerman. 2007. ‚ÄúA Physiologically Based Mathematical Model of Melatonin Including Ocular Light Suppression and Interactions with the Circadian Pacemaker.‚Äù Journal of Pineal Research 43 (3): 294‚Äì304. https://doi.org/10.1111/j.1600-079X.2007.00477.x.",
    "crumbs": [
      "Melatonin suppression model",
      "Melatonin suppression model"
    ]
  },
  {
    "objectID": "chang14_light_schedule.html",
    "href": "chang14_light_schedule.html",
    "title": "Light schedule computations",
    "section": "",
    "text": "Chang14 light schedule implementation\nLoad light schedules (calculated using the calculate_light_schedules.py script).\n\n\nCode\nimport numpy as np\n\ndata_location = 'data/light_schedules/'\n\nlight_schedule_time = np.load(data_location + 'time.npy')\nregular_light = np.load(data_location + 'regular_light.npy')\nchang14_ebook_first_light = np.load(data_location + 'chang14_ebook_first_light.npy')\nchang14_ebook_second_light = np.load(data_location + 'chang14_ebook_second_light.npy')\n\n\n\n\nCode\nimport matplotlib.pyplot as plt\n\nplt.figure(1)\nplt.plot(light_schedule_time, chang14_ebook_first_light)\nplt.figure(2)\nplt.plot(light_schedule_time, chang14_ebook_second_light)\nplt.show()",
    "crumbs": [
      "Chang et al. 2014",
      "Light schedule"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This document explores the effect of evening light on sleep through mathematical modeling",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "chang14_experimental_results.html",
    "href": "chang14_experimental_results.html",
    "title": "Chang et al.¬†2014",
    "section": "",
    "text": "Main article findings and results to be replicated\nWIP: Plots that we intend to reproduce from the paper.\n\n\n\nFigure 1: Light schedule\n\n\n\n\n\nFigure 2: Phase shift\n\n\n\n\n\nFigure 3: Sleep",
    "crumbs": [
      "Chang et al. 2014",
      "Experimental results"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Effect of evening light on sleep",
    "section": "",
    "text": "Introduction\nMathematical modeling can help us understand how evening light affects our sleep. Throughout this document we use the Skeldon23() model from the circadian package. The model tells us how the circadian state and sleep homeostat evolve over time. The only input to the model is the light received at each timepoint:\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom circadian.lights import LightSchedule\n\ndt = 0.01 # hours\ntime = np.arange(0, 48, dt)\nschedule = LightSchedule.Regular(1000.0, 6.0, 22.0)\nlight = schedule(time)\n\nplt.plot(time, light)\nplt.xlabel('Time (hours)')\nplt.ylabel('Light intensity')\nplt.show()\n\n\n\n\n\nLight schedule\n\n\n\n\n\n\nCode\nfrom circadian.models import Skeldon23\nmodel = Skeldon23()\ntrajectory = model.integrate(time, input=light)\nx = trajectory.states[:, 0]\n\nplt.plot(time, x)\nplt.xlabel('Time (hours)')\nplt.ylabel('Circadian state (a.u.)')\nplt.show()\n\n\n\n\n\nCircadian state",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "melatonin_breslow13_on_chang14.html",
    "href": "melatonin_breslow13_on_chang14.html",
    "title": "Breslow13 under Chang14 light schedule",
    "section": "",
    "text": "MelatoninHilaire07 under Chang14 light schedule\nWIP",
    "crumbs": [
      "Melatonin suppression model",
      "Simulations on Chang14 light schedule"
    ]
  },
  {
    "objectID": "skeldon23_on_chang14.html",
    "href": "skeldon23_on_chang14.html",
    "title": "Light schedule computations",
    "section": "",
    "text": "Load light schedules (calculated using the calculate_light_schedules.py script).\n\n\nCode\nimport numpy as np\n\ndata_location = 'data/light_schedules/'\n\nlight_schedule_time = np.load(data_location + 'time.npy')\nregular_light = np.load(data_location + 'regular_light.npy')\nchang14_ebook_first_light = np.load(data_location + 'chang14_ebook_first_light.npy')\nchang14_ebook_second_light = np.load(data_location + 'chang14_ebook_second_light.npy')\n\n\nAfter doing simulations for 125 parameter sets:\n\n\nCode\nmu_values = np.linspace(17.5, 19.5, 5)\ndelta_values = np.linspace(5.0, 9.0, 5)\nchi_values = np.linspace(7.0, 11.0, 5)\n\n\nwe select only those with a sleep duration that is greater than 6.5 hours, leaving us with 61 parameter sets. The distribution of sleep duration is shown below:\n\n\nCode\n# histogram of sleep sleep time from selected parameters\nsleep_time = selected_parameters['sleep_time']\nplt.hist(sleep_time, bins=20, rwidth=0.8)\nxticks = np.linspace(6.5, 8.0, 7)\nplt.xticks(xticks)\nplt.xlabel('Sleep duration (hours)')\nplt.ylabel('Count')\n# Add annotation for the number of selected parameters\nplt.annotate(f'N = {selected_parameters.shape[0]}', xy=(7.85, 8))\nplt.show()\n\n\n\n\n\n\n\n\n\nFor each of these parameter sets, we simulate the model under three light schedules: - Regular - Chang14 with eBook on the first week (book on the second week) - Chang14 with eBook on the second week (book on the first week)\nWe can analyze the sleep onset for each simulation condition:\n\n\nCode\ncolors = sns.color_palette('tab10')\nfor idx, simulation_condition in enumerate(['regular', 'ebook_first', 'ebook_second']):\n    plt.figure(idx)\n    plot_data = simulation_features[simulation_features['simulation_condition'] == simulation_condition]\n    sns.catplot(x='day', y='sleep_onset', data=plot_data, kind='box', color=colors[idx], showfliers=False)\n    sns.stripplot(x='day', y='sleep_onset', data=plot_data, color='black', alpha=0.5, dodge=True)\n    if simulation_condition == 'ebook_first':\n        plt.axvspan(3 - 2, 7 - 2, color='red', alpha=0.3, label='eBook')\n        plt.axvspan(9 - 2, 13 - 2, color='gray', alpha=0.3, label='Book')\n    elif simulation_condition == 'ebook_second':\n        plt.axvspan(3 - 2, 7 - 2, color='gray', alpha=0.3, label='Book')\n        plt.axvspan(9 - 2, 13 - 2, color='red', alpha=0.3, label='eBook')\n    plt.ylim(21.9, 23.7)\n    plt.legend()\n    plt.xlabel('Day')\n    plt.ylabel('Sleep onset (hours)')\n    plt.title(f\"Sleep onset for {simulation_condition} condition\")\n    plt.show()\n\n\nC:\\Users\\tavel\\AppData\\Local\\Temp\\ipykernel_3296\\3439049030.py:14: UserWarning:\n\nNo artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\nAs expected the regular condition has no change in sleep onset across days (it does between different simulations). For the Chang14 light schedule, we see that the sleep onset varies over the two weeks. When the eBook is on the first week (days 2-6), sleep onset remains relatively constant for that first week. However when reading is done with a book (days 8-12), the sleep onset starts to decrease. On the contrary, when the eBook is on the second week, sleep onset starts to decrease at first (book reading), and then increases (eBook reading).\nThere are many parameter sets that have a regular sleep onset that is close or equal to 22 hours (time the lights go off). Those sets tend to have little to no change when simulated under the Chang14 light schedules:\n\n\nCode\n# for each idx, calculate the avg and std sleep onset for each simulation condition (average across days)\nsleep_onset_data = simulation_features.groupby(['idx', 'simulation_condition']).agg({'sleep_onset': ['mean', 'std']}).reset_index()\n\nregular_data = sleep_onset_data[sleep_onset_data['simulation_condition'] == 'regular']\nebook_first_data = sleep_onset_data[sleep_onset_data['simulation_condition'] == 'ebook_first']\nebook_second_data = sleep_onset_data[sleep_onset_data['simulation_condition'] == 'ebook_second']\n# plot regular mean vs ebook_first std\nplt.plot(regular_data['sleep_onset']['mean'], ebook_first_data['sleep_onset']['std'], 'o', alpha=0.5, color='tab:blue')\nplt.plot(regular_data['sleep_onset']['mean'], ebook_second_data['sleep_onset']['std'], 'o', alpha=0.5, color='tab:blue')\nplt.xlabel('Regular schedule sleep onset')\nplt.ylabel('Stdev of sleep onset across days')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nDifference in sleep onset between book and ebook days\nAs in [@chang2014sleep], we plot the sleep latency (sleep_onset - 22.0) for each reading condition on the last day of reading:\n\n\nCode\nebook_bedtime_1 = simulation_features[(simulation_features['day'] == 6) & (simulation_features['simulation_condition'] == 'ebook_first')]['sleep_onset'].to_numpy()\nebook_bedtime_2 = simulation_features[(simulation_features['day'] == 13) & (simulation_features['simulation_condition'] == 'ebook_second')]['sleep_onset'].to_numpy()\n\nbook_bedtime_1 = simulation_features[(simulation_features['day'] == 12) & (simulation_features['simulation_condition'] == 'ebook_first')]['sleep_onset'].to_numpy()\nbook_bedtime_2 = simulation_features[(simulation_features['day'] == 6) & (simulation_features['simulation_condition'] == 'ebook_second')]['sleep_onset'].to_numpy()\n\nebook_bedtime = 60.0 * (np.concatenate([ebook_bedtime_1, ebook_bedtime_2]) - 22.0)\nbook_bedtime = 60.0 * (np.concatenate([book_bedtime_1, book_bedtime_2]) - 22.0)\n\n# boxplot of each\nsns.boxplot(data=[ebook_bedtime, book_bedtime], showfliers=False)\nsns.stripplot(data=[ebook_bedtime, book_bedtime], color='black', alpha=0.5)\nplt.ylabel('Sleep latency (min)')\nplt.xticks([0, 1], ['eBook', 'Book'])\n\n\n([&lt;matplotlib.axis.XTick at 0x2d9f01461d0&gt;,\n  &lt;matplotlib.axis.XTick at 0x2d9f00c1e50&gt;],\n [Text(0, 0, 'eBook'), Text(1, 0, 'Book')])\n\n\n\n\n\n\n\n\n\nAdditionally, we calculate the sleep onset difference (within each simulation) between the last day of each reading condition:\n\n\nCode\nebook_bedtime_1 = simulation_features[(simulation_features['day'] == 6) & (simulation_features['simulation_condition'] == 'ebook_first')]['sleep_onset'].to_numpy()\nbook_bedtime_1 = simulation_features[(simulation_features['day'] == 12) & (simulation_features['simulation_condition'] == 'ebook_first')]['sleep_onset'].to_numpy()\ndifference_1 = ebook_bedtime_1 - book_bedtime_1\n\nebook_bedtime_2 = simulation_features[(simulation_features['day'] == 12) & (simulation_features['simulation_condition'] == 'ebook_second')]['sleep_onset'].to_numpy()\nbook_bedtime_2 = simulation_features[(simulation_features['day'] == 6) & (simulation_features['simulation_condition'] == 'ebook_second')]['sleep_onset'].to_numpy()\ndifference_2 = ebook_bedtime_2 - book_bedtime_2\n\n# boxplot of difference\ndifference = np.concatenate([difference_1, difference_2])\nsns.boxplot(data=difference * 60)\nsns.stripplot(data=difference * 60, color='black', alpha=0.5)\nplt.ylabel('eBook - Book bedtime difference (min)')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nPhase shift between book and ebook days\n\n\nCode\n# calculate the difference between day 13 and day 6 for cbtmin\nebook_cbtmin_1 = sleep_onset_data[(sleep_onset_data['day'] == 6) & (sleep_onset_data['reading_condition'] == 'ebook_first')]['chang14_cbtmin'].to_numpy()\nebook_cbtmin_2 = sleep_onset_data[(sleep_onset_data['day'] == 13) & (sleep_onset_data['reading_condition'] == 'ebook_first')]['chang14_cbtmin'].to_numpy()\ndifference_1 = ebook_cbtmin_1 - ebook_cbtmin_2\n\nbook_cbtmin_1 = sleep_onset_data[(sleep_onset_data['day'] == 6) & (sleep_onset_data['reading_condition'] == 'ebook_second')]['chang14_cbtmin'].to_numpy() % 24\nbook_cbtmin_2 = sleep_onset_data[(sleep_onset_data['day'] == 13) & (sleep_onset_data['reading_condition'] == 'ebook_second')]['chang14_cbtmin'].to_numpy() % 24\ndifference_2 = book_cbtmin_1 - book_cbtmin_2\n\n\ndifference = np.concatenate([difference_1, difference_2])\n# seaborn boxplot showing the dots\nsns.boxplot(data=difference * 60)\nsns.stripplot(data=difference * 60, color='black', alpha=0.5)\nplt.ylabel('Phase shift as CBTmin difference (min)')\nplt.xlabel('Reading condition')\nplt.show()\n\n\n\n\nCode\nfor reading_condition in ['ebook_first', 'ebook_second']:\n    for idx in selected_parameters.index:\n        try:\n            data = np.load(f'data/skeldon23_on_chang14/chang14_simulation_{idx}.npz', allow_pickle=True)\n        except:\n            continue\n\n        regular_trajectory = data['regular_trajectory_states']\n        chang14_trajectory = data[f'{reading_condition}_trajectory_states']\n\n        regular_sleep = data['regular_sleep']\n        chang14_sleep = data[f'{reading_condition}_sleep']\n\n        day_6_idx = np.where((time &lt; 6*24) & (time &gt; 5*24))[0]\n        day_13_idx = np.where((time &lt; 13*24) & (time &gt; 12*24))[0]\n        normalized_time = np.arange(0, 24, 24/len(day_6_idx))\n\n        plt.plot(normalized_time, regular_trajectory[day_6_idx, 0], color='tab:blue')\n        plt.plot(normalized_time, regular_trajectory[day_13_idx, 0], color='tab:blue')\n        plt.plot(normalized_time, regular_sleep[day_6_idx], color='tab:blue', linestyle='--')\n        plt.plot(normalized_time, regular_sleep[day_13_idx], color='tab:blue', linestyle='--')\n        if reading_condition == 'ebook_first':\n            plt.plot(normalized_time, chang14_trajectory[day_6_idx, 0], color='tab:green')\n            plt.plot(normalized_time, chang14_trajectory[day_13_idx, 0], color='tab:red')\n        else:\n            plt.plot(normalized_time, chang14_trajectory[day_6_idx, 0], color='tab:red')\n            plt.plot(normalized_time, chang14_trajectory[day_13_idx, 0], color='tab:green')\n    plt.axvspan(6, 22, color='yellow', alpha=0.4)\n\n\n\n\nCode\nfor idx in selected_parameters.index:\n    try:\n        data = np.load(f'data/skeldon23_on_chang14/chang14_simulation_{idx}.npz', allow_pickle=True)\n    except:\n        continue\n\n    regular_trajectory = data['regular_trajectory_states']\n    chang14_trajectory = data[f'{reading_condition}_trajectory_states']\n\n    regular_sleep = data['regular_sleep']\n    chang14_sleep = data[f'{reading_condition}_sleep']\n\n    first_week_idx = np.where((time &lt; 14*24) & (time &gt; 13*24))[0]\n    normalized_time = np.arange(0, 24, 24/len(first_week_idx))\n\n    plt.plot(normalized_time, chang14_trajectory[first_week_idx, 3])\n\nplt.title('Day 14')\nplt.ylabel('Circadian state')\nplt.xlabel('Time (hours)')\n\n\n\n\nCode\nfor idx in selected_parameters.index:\n    try:\n        data = np.load(f'data/skeldon23_on_chang14/chang14_simulation_{idx}.npz', allow_pickle=True)\n    except:\n        continue\n\n    regular_trajectory = data['regular_trajectory_states']\n    chang14_trajectory = data[f'{reading_condition}_trajectory_states']\n\n    regular_sleep = data['regular_sleep']\n    chang14_sleep = data[f'{reading_condition}_sleep']\n\n    first_week_idx = np.where((time &lt; 14*24) & (time &gt; 13*24))[0]\n    normalized_time = np.arange(0, 24, 24/len(first_week_idx))\n\n    plt.plot(normalized_time, chang14_sleep[first_week_idx])\n\nplt.title('Day 14')\nplt.ylabel('Sleep')\nplt.xlabel('Time (hours)')\n\n\nSo I think I know the reason for these plots, the sleep homeostat only feeds back to the circadian state by changing the light the model receives. Given that we force it to be awake when there‚Äôs light, there‚Äôs actually no change in light schedule for each simulation and that causes the circadian state to be the same for each simulation. ‚Äì&gt;",
    "crumbs": [
      "Sleep model",
      "Simulations on Chang14 light schedule"
    ]
  }
]